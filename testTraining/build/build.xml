<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="antlib:org.apache.tools.ant" xmlns:ivy="antlib:org.apache.ivy.ant" name="resolve_dependencies" default="resolve_dependencies" basedir="..">

	<path id="testTraining.classpath">
		<pathelement location="target/classes" />
		<pathelement location="target/test-classes" />
		<pathelement location="lib/oss/jar/junit.jar" />
		<pathelement location="lib/oss/jar/hamcrest-core.jar" />
	</path>

	<!-- build dir -->
	<property name="build.dir" value="./build" />
	<property file="${build.dir}/build.properties" />

	<!-- ant libraries -->
	<property name="ant.jar.dir" value="./${lib.dir}/ant" />
	<path id="ant.lib.path">
		<fileset dir="${ant.jar.dir}" includes="*.jar" />
	</path>

	<!-- product src -->
	<property name="product.src" location="${basedir}/src/main/java" />
	<!-- product resources -->
	<property name="product.resources" location="${basedir}/src/main/resources" />
	<!-- product classes -->
	<property name="product.classes" location="${basedir}/target/classes" />

	<!-- test src -->
	<property name="test.src" location="${basedir}/src/test/java" />
	<!-- test resources -->
	<property name="test.resources" location="${basedir}/src/test/resources" />
	<!-- test classes -->
	<property name="test.classes" location="${basedir}/target/test-classes" />

	<!-- repord dir -->
	<property name="report.dir" value="${basedir}/report" />
	<property name="report.test.dir" value="${report.dir}/test" />

	<!-- ivy -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ant.lib.path" />
	<ivy:configure file="${build.dir}/ivy-settings.xml" />
	<ivy:info file="${build.dir}/ivy.xml" />

	<!-- macrodef -->
	<macrodef name="mcr_refresh_opensource_dependencies" taskname="resolve open source dependencies with ivy">
		<attribute name="conf" />
		<sequential>
			<echo message="macro:[mcr_refresh_opensource_dependencies] started.">
			</echo>
			<property name="oss.lib.dir" location="${lib.dir}/oss" />
			<delete dir="${oss.lib.dir}" failonerror="false" verbose="on" taskname="clean oss jars" />
			<ivy:resolve file="${build.dir}/ivy.xml" log="default" haltonfailure="true" showprogress="true" conf="@{conf}" />
			<ivy:retrieve file="${build.dir}/ivy.xml" pattern="${lib.dir}\oss\[type]\[artifact].[ext]" type="jar,bundle" conf="@{conf}" />
			<ivy:retrieve file="${build.dir}/ivy.xml" pattern="${lib.dir}\oss\[type]\[artifact]-[type].[ext]" type="source,javadoc" conf="@{conf}" />
			<echo message="macro:[mcr_refresh_opensource_dependencies] ended.">
			</echo>
		</sequential>
	</macrodef>

	<!-- ===============================
                target definition
         =============================== -->
	<target name="init">
		<echo message="exec init" />
		<delete dir="target/classes" />
		<delete dir="target/test-classes" />
		<mkdir dir="target/classes" />
		<mkdir dir="target/test-classes" />
		<copy includeemptydirs="false" todir="target/classes">
			<fileset dir="src/main/java">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="target/classes">
			<fileset dir="src/main/resources">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="target/test-classes">
			<fileset dir="src/test/java">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="target/test-classes">
			<fileset dir="src/test/resources">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="clean">
		<delete dir="target/classes" />
		<delete dir="target/test-classes" />
	</target>

	<target depends="clean" name="cleanall" />

	<target depends="compile_subprojects,compile" name="build" />

	<target name="compile_subprojects" />

	<target name="compile" depends="resolve_dependencies">
		<echo message="${ant.project.name}: ${ant.file}" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="target/classes" includeantruntime="false" source="${source}" target="${target}">
			<src path="src/main/java" />
			<src path="src/main/resources" />
			<classpath refid="testTraining.classpath" />
		</javac>

		<javac debug="true" debuglevel="${debuglevel}" destdir="target/test-classes" includeantruntime="false" source="${source}" target="${target}">
			<src path="src/test/java" />
			<src path="src/test/resources" />
			<classpath refid="testTraining.classpath" />
		</javac>
	</target>

	<target name="resolve_dependencies" depends="init">
		<mcr_refresh_opensource_dependencies conf="test" />
	</target>

	<target name="test_compile" depends="resolve_dependencies">
		<echo message="exec test_compile">
		</echo>
	</target>

	<target name="unit_test" depends="init,compile" description="execute Junit">
		<mkdir dir="${report.test.dir}" />
		<delete>
			<fileset dir="${report.test.dir}" includes="TEST-*" />
		</delete>
		<junit printsummary="yes" haltonfailure="yes">

			<classpath refid="class.path" />

			<batchtest fork="yes" todir="${report.test.dir}">
				<formatter type="xml" />
				<fileset dir="${test.src}">
					<include name="**/*Test.java" />
					<exclude name="**/TestAll.java" />
				</fileset>
			</batchtest>
		</junit>

		<!--バッチテストの実行結果をTESTS-TestSuites.xmlにまとめて、そこからHTMLを生成-->
		<junitreport todir="${report.test.dir}">
			<fileset dir="${report.test.dir}">
				<include name="TEST-*.xml" />
			</fileset>

			<!--TESTS-TestSuites.xmlから生成するHTML-->
			<!--eclipse3.0.1(ant1.6.2/Xalan1)では、"frames"は使えないけど、
	      どうせ印刷するんだから"noframes"でいいや-->
			<report format="noframes" todir="${report.test.dir}" />
		</junitreport>

		<!--
		<junit>
			<classpath refid="testTraining.classpath" />
			<test name="${test.class}" todir="${test.report.dir}" />
			<formatter type="xml" extension=".xml" />
		</junit>
		-->
		<!--
		<junit fork="yes" haltonfailure="false">
			<formatter type="xml" usefile="true" />
            <classpath refid="testTraining.classpath"/>
			<batchtest fork="yes" todir="${report.test.dir}">
				<fileset dir="${test.src}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
		-->
	</target>

	<target name="test" depends="">
		<echo message="exec test">
		</echo>
	</target>

	<target name="dist" depends="compile,test">
		<echo message="exec dist">
		</echo>
	</target>

</project>
